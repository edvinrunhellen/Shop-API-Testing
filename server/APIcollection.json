{
	"info": {
		"_postman_id": "03d1fbc3-5644-4cc0-8b3e-72c0c1073332",
		"name": "API Ã¶vningar",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38806931"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Logout - Admin Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/login",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sign-in status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"   ",
									"});",
									"",
									"pm.test(\"Verify sign-in response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Verify sign-in response body has the correct user details\", function () {",
									"    pm.expect(pm.response.json().id).to.eql(1);",
									"    pm.expect(pm.response.json().username).to.eql(\"admin\");",
									"    pm.expect(pm.response.json().email).to.eql(\"admin@admin.com\");",
									"    pm.expect(pm.response.json().role).to.eql(\"admin\");",
									"});",
									"",
									"pm.test(\"Session is created successfully\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json()).to.have.property('username', 'admin');",
									"    pm.expect(pm.response.json()).to.have.property('email', 'admin@admin.com');",
									"    pm.expect(pm.response.json()).to.have.property('role', 'admin');",
									"});",
									"",
									"pm.test(\"Cookies have been se\", function () {",
									"    pm.expect(pm.cookies.has('.Session')).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@admin.com\",\n    \"password\": \"admin123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/login",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify insertid is returned\", function () {",
									"    pm.response.to.have.jsonBody(\"insertId\");",
									"});",
									"",
									"pm.test(\"Status code is 200 and added user and saved user id\", function () {",
									"    pm.response.to.have.status(200);",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.environment.set(\"user_id\", jsonData.insertId); ",
									"",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"testuser\",\n    \"email\": \"testtest@testuser.com\",\n    \"password\": \"securepassword\",\n    \"roleid\": \"2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/users",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Get All Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response is 200\", function() {",
									"pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has the required fields - id and name\", function () {",
									"    const responsedata = pm.response.json();",
									"    pm.expect(responsedata).to.be.an('array');",
									"    responsedata.forEach(function(category) {",
									"        pm.expect(category).to.have.property('id');",
									"        pm.expect(category).to.have.property('name');",
									"    });",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"    const responsedata = pm.response.json();",
									"    responsedata.forEach(function(category) {",
									"        pm.expect(category.name).to.be.a('string').and.to.not.be.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root}}/api/categories",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verify category post request",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Verify the inserted category name\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.category).to.equal(\"Hollow\");",
									"    ",
									"    pm.environment.set(\"category_id\", jsonData.insertId); ",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Hollow\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/categories",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Products",
			"item": [
				{
					"name": "Add product (id variables)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201 and save categoryId to a variable\", function () {",
									"    pm.response.to.have.status(201);",
									"",
									"    var jsonData = pm.response.json();",
									"",
									"    pm.environment.set(\"category\", jsonData.category);",
									"    pm.environment.set(\"product_id\", jsonData.insertId); ",
									"",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Boiled Bowwdwwdwdwdffwddweedsssssdwffwwwkkdwqwddwdwdwdwdwddwlsss\",\n    \"price\": 60,\n    \"categoryId\": {{category_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/products",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields - id, name, price, and category\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function(product) {",
									"        pm.expect(product).to.have.property('id');",
									"        pm.expect(product).to.have.property('name');",
									"        pm.expect(product).to.have.property('price');",
									"        pm.expect(product).to.have.property('category');",
									"    });",
									"});",
									"",
									"pm.test(\"Response ia an array\", function () {",
									"     pm.expect(pm.response.json()).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(product) {",
									"        pm.expect(product.price).to.be.a('number').and.to.be.at.least(0);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/products",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Specific Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"One specific product GET\", function() {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root}}/api/products/{{product_id}}",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Manage Products",
			"item": [
				{
					"name": "Add product : NOT LOGGED IN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unauthorized request returns 401 status code\", function () {",
									"    pm.response.to.have.status(500);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Eggs\",\n    \"price\": 60,\n    \"category_id\": {{category_id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/products",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Price",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(200);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Boiled Egggs\",\n    \"price\": 80,\n    \"categoryId\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/products/{{product_id}}",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.lessThan(500);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{root}}/api/products/{{product_id}}",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ProductVariableGetExample",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let id = pm.environment.get(\"product_id\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root}}/api/products/{{product_id}}",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"products",
								"{{product_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Order",
			"item": [
				{
					"name": "Logout - Admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// cookies is not cleared in postman",
									"//pm.test(\"Cookies have been cleared\", function () {",
									"  //  pm.expect(pm.cookies.has('.Session')).to.be.false;",
									"//});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@admin.com\",\n    \"password\": \"admin123\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/login",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "New login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testtest@testuser.com\",\n    \"password\": \"securepassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/login",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Order product as user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Ensure the response status is 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify the presence of the insertId in the response body",
									"pm.test(\"Verify the presence of insertId\", function () {",
									"    pm.expect(pm.response.json().insertId).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ProductId\": 3,\n    \"Quantity\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/orders",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout - User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// cookies is not cleared in postman",
									"//pm.test(\"Cookies have been cleared\", function () {",
									"  //  pm.expect(pm.cookies.has('.Session')).to.be.false;",
									"//});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"testuser@exawdedmwdwdpwdle.com\",\n    \"password\": \"securepassword\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/login",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"sign-in status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"   ",
									"});",
									"",
									"pm.test(\"Verify sign-in response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Verify sign-in response body has the correct user details\", function () {",
									"    pm.expect(pm.response.json().id).to.eql(1);",
									"    pm.expect(pm.response.json().username).to.eql(\"admin\");",
									"    pm.expect(pm.response.json().email).to.eql(\"admin@admin.com\");",
									"    pm.expect(pm.response.json().role).to.eql(\"admin\");",
									"});",
									"",
									"pm.test(\"Session is created successfully\", function () {",
									"    pm.expect(pm.response.json()).to.have.property('id');",
									"    pm.expect(pm.response.json()).to.have.property('username', 'admin');",
									"    pm.expect(pm.response.json()).to.have.property('email', 'admin@admin.com');",
									"    pm.expect(pm.response.json()).to.have.property('role', 'admin');",
									"});",
									"",
									"pm.test(\"Cookies have been se\", function () {",
									"    pm.expect(pm.cookies.has('.Session')).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@admin.com\",\n    \"password\": \"admin123\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/login",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get orders from user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Verify that the response body contains price",
									"pm.test(\"Response body contains 'price'\", function () {",
									"    var jsonData = pm.response.json();",
									"    for (var i = 0; i < jsonData.length; i++) {",
									"        pm.expect(jsonData[i]).to.have.property('price');",
									"    }",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{root}}/api/user/7/orders",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"user",
								"7",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific order by user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Total price is calculated correctly\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.price * responseBody.quantity).to.equal(responseBody.total);",
									"});",
									"",
									"pm.test(\"Timestamp exists under createdAt\", function () {",
									"    const responseBody = pm.response.json();",
									"    pm.expect(responseBody.createdAt).to.exist;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{root}}/api/user/{{user_id}}/orders/1",
							"host": [
								"{{root}}"
							],
							"path": [
								"api",
								"user",
								"{{user_id}}",
								"orders",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ControlAdminAccess",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{root}}/api/users",
					"host": [
						"{{root}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout - Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// cookies is not cleared in postman",
							"pm.test(\"Cookies have been cleared\", function () {",
							"    pm.expect(pm.cookies.has('Session')).to.be.false;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"admin@admin.com\",\n    \"password\": \"admin123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{root}}/api/login",
					"host": [
						"{{root}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "New login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify role is user\", function () {",
							"    pm.expect(pm.response.json().role).to.equal(\"user\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"testtest@testuser.com\",\n    \"password\": \"securepassword\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{root}}/api/login",
					"host": [
						"{{root}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout - Admin Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{root}}/api/login",
					"host": [
						"{{root}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - Admin Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"sign-in status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"   ",
							"});",
							"",
							"pm.test(\"Verify sign-in response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Verify sign-in response body has the correct user details\", function () {",
							"    pm.expect(pm.response.json().id).to.eql(1);",
							"    pm.expect(pm.response.json().username).to.eql(\"admin\");",
							"    pm.expect(pm.response.json().email).to.eql(\"admin@admin.com\");",
							"    pm.expect(pm.response.json().role).to.eql(\"admin\");",
							"});",
							"",
							"pm.test(\"Session is created successfully\", function () {",
							"    pm.expect(pm.response.json()).to.have.property('id');",
							"    pm.expect(pm.response.json()).to.have.property('username', 'admin');",
							"    pm.expect(pm.response.json()).to.have.property('email', 'admin@admin.com');",
							"    pm.expect(pm.response.json()).to.have.property('role', 'admin');",
							"});",
							"",
							"pm.test(\"Cookies have been se\", function () {",
							"    pm.expect(pm.cookies.has('.Session')).to.be.true;",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"admin@admin.com\",\n    \"password\": \"admin123\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{root}}/api/login",
					"host": [
						"{{root}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Verify category post request",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Drinksss\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{root}}/api/categories/{{category_id}}",
					"host": [
						"{{root}}"
					],
					"path": [
						"api",
						"categories",
						"{{category_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Verify insertid is returned\", function () {",
							"    pm.response.to.have.jsonBody(\"message\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{root}}/api/users/{{user_id}}",
					"host": [
						"{{root}}"
					],
					"path": [
						"api",
						"users",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout - Admin Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{root}}/api/login",
					"host": [
						"{{root}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		}
	]
}